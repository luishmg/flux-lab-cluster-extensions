---
# Create the namespace to run harbor
apiVersion: v1
kind: Namespace
metadata:
  name: harbor
  labels:
    team: DevOps
    istio-injection: enable
---
# Create a file system storage for the harbor container registry
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cephfs-harbor-registry
  namespace: harbor
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: rook-cephfs
---
# Create a file system storage for the harbor chart registry
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cephfs-harbor-chartmuseum
  namespace: harbor
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: rook-cephfs
---
# Create a file system storage for the harbor jobservice
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cephfs-harbor-jobservice
  namespace: harbor
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: rook-cephfs
---
# Create a block storage for the harbor database
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rbd-harbor-database
  namespace: harbor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: rook-ceph-block
---
# Create a block storage for the harbor redis
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rbd-harbor-redis
  namespace: harbor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: rook-ceph-block
---
# Create a block storage for the harbor trivy image scan
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rbd-harbor-trivy
  namespace: harbor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: rook-ceph-block
---
# Load the helm repository inside the flux system
apiVersion: source.toolkit.fluxcd.io/v1beta1
kind: HelmRepository
metadata:
  name: harbor
  namespace: harbor
spec:
  interval: 1m
  url: https://helm.goharbor.io
---
# Deploy te application with helm
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: harbor
  namespace: harbor
spec:
  chart:
    spec:
      chart: harbor
      sourceRef:
        kind: HelmRepository
        name: harbor
      version: 1.7.5
  interval: 1m0s
  values:
    expose:
      # Set the way how to expose the service. Set the type as "ingress",
      # "clusterIP", "nodePort" or "loadBalancer" and fill the information
      # in the corresponding section
      type: clusterIP
      tls:
        enabled: false
    externalURL: http://harbor.k8s.stg.lab.internal
    # Neet to improve this with the sealed secrets and use the kustomize grabbing the value from the secrets
    harborAdminPassword: "labsasecret"
    portal:
      replicas: 2
    core:
      replicas: 2
    jobservice:
      replicas: 2
    registry:
      replicas: 2
      # Neet to improve this with the sealed secrets and use the kustomize grabbing the value from the secrets
      # credentials:
      #   username: "admin"
      #   password: "labsasecret"
    chartmuseum:
      replicas: 2
    clair:
      replicas: 2
    notary:
      server:
        replicas: 2
      signer:
        replicas: 2
    persistence:
      persistentVolumeClaim:
        registry:
            existingClaim: "cephfs-harbor-registry"
        chartmuseum:
            existingClaim: "cephfs-harbor-chartmuseum"
        jobservice:
            existingClaim: "cephfs-harbor-jobservice"
        database:
          existingClaim: "rbd-harbor-database"
        redis:
          existingClaim: "rbd-harbor-redis"
        trivy:
          existingClaim: "rbd-harbor-trivy"
---
# Create virtual service for the harbor application
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: harbor-portal
  namespace: harbor
spec:
  hosts:
  - "harbor.k8s.stg.lab.internal"
  gateways:
  - istio-system/gateway-internal
  http:
  - match:
    - uri:
        prefix: /api/
    - uri:
        prefix: /service/
    - uri:
        prefix: /v2
    - uri:
        prefix: /chartrepo/
    - uri:
        prefix: /c/
    route:
    - destination:
        host: harbor-core
        port:
          number: 80
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: harbor-portal
        port:
          number: 80
---
# Create virtual service for the harbor notary
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: harbor-notary
  namespace: harbor
spec:
  hosts:
  - "harbor-notary.k8s.stg.lab.internal"
  gateways:
  - istio-system/gateway-internal
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: harbor-notary-server
        port:
          number: 80
